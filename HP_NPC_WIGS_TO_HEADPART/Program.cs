using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.WPF.Reflection.Attributes;
using Synthesis.Bethesda.Commands;
using Noggog.StructuredStrings.CSharp;
using static System.Runtime.InteropServices.JavaScript.JSType;
using Mutagen.Bethesda.Plugins.Cache;
using DynamicData.Kernel;
using DynamicData;
using System.Numerics;

namespace HP_NPC_WIGS_TO_HEADPART
{
    public class Program
    {
        public class Settings
        {
            [MaintainOrder]
            [Tooltip("Plugin For Patch")]
            public ModKey plugin;
        }

        static Lazy<Settings> ProgramSettings = null!;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "HP_NPC_WIGS_TO_HEADPART",
                    path: "HP_NPC_WIGS_TO_HEADPART.json",
                    out ProgramSettings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "HpNPCWigsToHeadpart.esp")
                .Run(args);
        }

        public class wigsStruct
        {
            public string? mNif;
            public string? fNif;
            public bool isSMP = false;

            public string getNif()
            {
                if (fNif == null)
                {
                    if(mNif == null)
                    {
                        return "";
                    }
                    return mNif;
                }
                return fNif;
            }
        }
        public class armorStruct
        {
            public string? edId;
            public wigsStruct? wig;

            public string? hairEdId;
            public FormKey? hairForm;
            public IHeadPartGetter? hairPart;
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Console.WriteLine($"Start patching: {ProgramSettings.Value.plugin}");

            var HpNpcResourcesPlugin = state.LoadOrder.TryGetValue(new ModKey("High Poly NPC Overhaul - Resources", ModType.Plugin));
            if (HpNpcResourcesPlugin?.Mod == null)
            {
                Console.WriteLine("This patcher requires a mod named 'High Poly NPC Overhaul - Resources.esp'.");
                return;
            }

            bool hasHDT = false;
            var HpNpcResourcesHDTPlugin = state.LoadOrder.TryGetValue(new ModKey("High Poly NPC Overhaul - Resources - KS Hairdos HDT SMP Physics Patch", ModType.Plugin));
            if (HpNpcResourcesHDTPlugin?.Mod != null)
            {
                hasHDT = true;
            }

            var HpNpcResourcesMod = HpNpcResourcesPlugin.Mod;

            var wigsDict = new Dictionary<FormKey, wigsStruct>();
            var armorDict = new Dictionary<FormKey, armorStruct>();

            foreach (var wigs in HpNpcResourcesMod.ArmorAddons)
            {
                if (wigs.EditorID == null || !wigs.EditorID.StartsWith("HighPoly_Wig"))
                {
                    continue;
                }
                var data = new wigsStruct();
                data.mNif = wigs.WorldModel?.Male?.File;
                data.fNif = wigs.WorldModel?.Female?.File;
                if (hasHDT && HpNpcResourcesHDTPlugin != null && HpNpcResourcesHDTPlugin.Mod != null && HpNpcResourcesHDTPlugin.Mod.ArmorAddons.ContainsKey(wigs.FormKey))
                {
                    foreach (var wigHDT in HpNpcResourcesHDTPlugin.Mod.ArmorAddons)
                    {
                        if (wigHDT.FormKey == wigs.FormKey)
                        {
                            data.isSMP = true;
                            data.mNif = wigHDT.WorldModel?.Male?.File;
                            data.fNif = wigHDT.WorldModel?.Female?.File;
                            break;
                        }
                    }
                }
                wigsDict.Add(wigs.FormKey, data);
            }

            foreach (var armor in HpNpcResourcesMod.Armors)
            {
                armorStruct? data = null;

                foreach (var armature in armor.Armature)
                {
                    if (!armature.IsNull && wigsDict.ContainsKey(armature.FormKey))
                    {
                        data = new armorStruct();
                        data.edId = armor.EditorID;
                        data.wig = wigsDict[armature.FormKey];
                        break;
                    }
                }
                if (data != null)
                {
                    armorDict.Add(armor.FormKey, data);
                    // Console.WriteLine($"{data.edId}: [SMP:{data.wig?.isSMP}] {data.wig?.getNif()}");
                }
            }

            var KSHairPlugin = state.LoadOrder.TryGetValue(new ModKey("KS Hairdo's", ModType.Plugin));
            if (KSHairPlugin?.Mod == null)
            {
                Console.WriteLine("This patcher requires a mod named 'KS Hairdo's'.");
                return;
            }

            var KSHairSMPPlugin = state.LoadOrder.TryGetValue(new ModKey("KSHairdosSMP", ModType.Plugin));

            foreach (var dic in armorDict)
            {
                if (dic.Value.wig == null) {
                    continue;
                }
                var mod = KSHairPlugin.Mod;
                if (dic.Value.wig.isSMP && KSHairSMPPlugin != null && KSHairSMPPlugin.Mod != null)
                {
                    mod = KSHairSMPPlugin.Mod;
                }

                IHeadPartGetter? headPartGetter = null;
                string wigNif = dic.Value.wig.getNif();

                if (wigNif.Length == 0)
                {
                    continue;
                }
                bool isElves = false;
                string wigNifPart = wigNif.Split('\\').Last();
                if(wigNifPart.EndsWith(".nif"))
                {
                    wigNifPart = wigNifPart.Remove(wigNifPart.Length - 4);
                }
                if (wigNifPart.EndsWith("_1"))
                {
                    wigNifPart = wigNifPart.Remove(wigNifPart.Length - 2);
                }
                if (wigNifPart == "ChainReaction")
                {
                    wigNifPart = "Chain Reaction";
                }
                if (wigNifPart == "RoughSketch")
                {
                    wigNifPart = "Rough Sketch";
                }
                if (wigNifPart == "NightSprings")
                {
                    wigNifPart = "Night Springs";
                }
                if (wigNifPart.EndsWith("_Elf"))
                {
                    wigNifPart = wigNifPart.Remove(wigNifPart.Length - 4);
                    wigNifPart = "\\Elves\\" + wigNifPart;
                    isElves = true;
                }
                if (wigNifPart.Length == 0) {
                    throw new Exception($"Error parse wig nif: {wigNif}");
                }
                wigNifPart += ".nif";
                if (wigNif.Contains("\\Elves\\"))
                {
                    wigNifPart = "\\Elves\\" + wigNifPart;
                    isElves = true;
                }

                foreach (var hair in mod.HeadParts)
                {
                    if (hair.Type != HeadPart.TypeEnum.Hair)
                    {
                        continue;
                    }
                    if(dic.Value.wig?.fNif != null && !hair.Flags.HasFlag(HeadPart.Flag.Female))
                    {
                        continue;
                    }
                    if (dic.Value.wig?.mNif != null && !hair.Flags.HasFlag(HeadPart.Flag.Male))
                    {
                        continue;
                    }
                    if (!isElves && hair.Model != null && ((string)hair.Model.File).Contains("\\Elves\\"))
                    {
                        continue;
                    }

                    if(hair.Model != null && ((string)hair.Model.File).Contains(wigNifPart))
                    {
                        if (headPartGetter == null)
                        {
                            headPartGetter = hair;
                        } else
                        {
                            throw new Exception($"Found duplicate headpart nif: {wigNif} - [{headPartGetter.Model?.File}, {hair.Model.File}]");
                        }
                    }
                }
                if (headPartGetter != null)
                {
                    Console.WriteLine($"{dic.Value.edId}: [SMP:{dic.Value.wig?.isSMP}] {dic.Value.wig?.getNif()} -> {headPartGetter.EditorID}:{headPartGetter.Model?.File}");
                    dic.Value.hairForm = headPartGetter.FormKey;
                    dic.Value.edId = headPartGetter.EditorID;
                    dic.Value.hairPart = headPartGetter;
                } else
                {
                    Console.WriteLine($"Not Found nif: {wigNif} - {wigNifPart}");
                }
            }

            var plugin = state.LoadOrder.TryGetValue(ProgramSettings.Value.plugin);
            if (plugin?.Mod == null)
            {
                Console.WriteLine($"This patcher requires a mod named '{ProgramSettings.Value.plugin}'.");
                return;
            }

//            var pluginMod = plugin.Mod;
//
//            var toPatch = state.LoadOrder.PriorityOrder.Where(
//                mod => pluginMod.ModKey == mod.ModKey
//                ); 
            
            var linkCache = state.LoadOrder.ToImmutableLinkCache<ISkyrimMod, ISkyrimModGetter>(LinkCachePreferences.Default);

            foreach (var npc in state.LoadOrder.PriorityOrder.Npc().WinningContextOverrides())
            {
                if(npc.Record.WornArmor == null) { continue; }
                if(!armorDict.ContainsKey(npc.Record.WornArmor.FormKey)) { continue; }
                var data = armorDict[npc.Record.WornArmor.FormKey];
                IHeadPartGetter? baldHeadPart = null;
                var hairsToRemove = new List<IHeadPartGetter>();
                foreach (var headPart in npc.Record.HeadParts)
                {
                    var hp = headPart.TryResolve(linkCache);
                    if (hp != null && hp.Type == HeadPart.TypeEnum.Hair) {
                        if (hp.EditorID == "HighPoly_HairBald")
                        {
                            baldHeadPart = hp;
                        }
                        else
                        {
                            hairsToRemove.Add(hp);
                        }
                    }
                }
                if (baldHeadPart == null)
                {
                    throw new Exception($"NPC {npc.Record.EditorID} not have HighPoly_HairBald");
                }
                if (data.hairPart == null)
                {
                    throw new Exception($"NPC {npc.Record.EditorID} not have valid hair for wig Armor {data.edId}");
                }
                Console.WriteLine($"Patch NPC '{npc.Record.EditorID}' -> add hair {data.hairPart.EditorID}.");
                var ovverideNPC = state.PatchMod.Npcs.GetOrAddAsOverride(npc.Record);
                ovverideNPC.WornArmor.Clear();
                ovverideNPC.HeadParts.Remove(baldHeadPart);
                for (int i = 0; i < hairsToRemove.Count; i++)
                {
                    Console.WriteLine($"NPC '{npc.Record.EditorID}' -> remove duplicate hair {hairsToRemove[i].EditorID}.");
                    ovverideNPC.HeadParts.Remove(hairsToRemove[i]);
                }
                ovverideNPC.HeadParts.Add(data.hairPart);
            }

        }
    }
}
